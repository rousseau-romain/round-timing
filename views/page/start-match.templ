package page

import "github.com/rousseau-romain/round-timing/shared/components"
import "github.com/markbates/goth"
import "github.com/rousseau-romain/round-timing/model"
import "strconv"
import "fmt"

templ StartMatchPage(user goth.User, errors components.Error, navItems []components.NavItem, match model.Match,  players []model.Player, playersSpells []model.MatchPlayerSpell) {
	@components.Layout("Start match", errors, user, navItems) {
		<div class="flex justify-center gap-2">
			<button
				type="submit"
				class="inline-block w-full rounded-lg bg-red-600 px-5 py-3 font-medium text-white sm:w-auto"
				hx-patch={ fmt.Sprintf("/match/%d/reset", match.Id) }
			>
				Reset match
			</button>
			<button
				type="submit"
				class="inline-block w-full rounded-lg bg-green-600 px-5 py-3 font-medium text-white sm:w-auto"
				hx-get={ fmt.Sprintf("/match/%d/increase-round", match.Id) }
				hx-target="next table"
			>
				Next Round
			</button>
		</div>
		<div class="overflow-x-auto">
			<script>
				function handleClickImage(img) {
					if (img.src.includes("F")) {
						img.src = img.src.replace("F", "M");
					} else {
						img.src = img.src.replace("M", "F");
					}
				}
			</script>
			@PlayerTable(match, players, playersSpells)
		</div>
	}
}

templ Spell(mps model.MatchPlayerSpell) {
	<div
		class={
			"has-tooltip",
			"relative border-2 rounded",
			templ.KV("border-red-500", mps.RoundBeforeRecovery == 1),
			templ.KV("border-yellow-500", mps.RoundBeforeRecovery == 2),
			templ.KV("border-cyan-500", mps.RoundBeforeRecovery >= 3),
		}
		hx-target="this"
		skipConfirmation
		if mps.RoundBeforeRecovery == 0 {
			hx-get={ fmt.Sprintf("/match/%d/player-spell/%d/use", mps.MatchId, mps.Id) }
		} else {
			hx-get={ fmt.Sprintf("/match/%d/player-spell/%d/remove-round-recovery", mps.MatchId, mps.Id) }
			hx-trigger="dblclick"
		}
	>
		<span class="tooltip rounded shadow-lg p-1 bg-gray-100 text-black -top-3/4 -left-full">
			<ul>
				<li class="font-bold">{ mps.Spell.Name }</li>
				<li>Delay between use : <span class="font-bold">{ strconv.Itoa(mps.Spell.Delay) }</span></li>
			</ul>
		</span>
		<img
			alt={ mps.Spell.Name }
			src={ mps.Spell.UrlImage }
			class={
				"h-12 img-class",
				templ.KV("cursor-pointer transition-all hover:scale-110", mps.RoundBeforeRecovery == 0),
				templ.KV("grayscale", mps.RoundBeforeRecovery > 0),
			}
		/>
		if mps.RoundBeforeRecovery > 0 {
			<span
				class={
					"absolute", "-right-0.5", "-top-0.5", "whitespace-nowrap", "rounded-full", "px-1.5", "text-sm",
					templ.KV("bg-red-100 text-red-700 dark:bg-red-700 dark:text-red-100", mps.RoundBeforeRecovery == 1),
					templ.KV("bg-yellow-100 text-yellow-700 dark:bg-yellow-700 dark:text-yellow-100", mps.RoundBeforeRecovery == 2),
					templ.KV("bg-cyan-100 text-cyan-700 dark:bg-cyan-700 dark:text-cyan-100", mps.RoundBeforeRecovery >= 3),
				}
			>
				{ strconv.Itoa(mps.RoundBeforeRecovery) }
			</span>
		}
	</div>
}

templ Player(p model.Player, playersSpells []model.MatchPlayerSpell) {
	<tr
		class={
			templ.KV("bg-red-200", p.Team.Color == "red"),
			templ.KV("bg-indigo-200", p.Team.Color == "indigo"),
		}
	>
		<td class="whitespace-nowrap px-4 py-2">
			<img onclick="handleClickImage(this)" alt={ p.Class.Name } title={ p.Name } src={ p.Class.UrlImage + "F.svg" } class="h-8 img-class  cursor-pointer transition-all hover:scale-110"/>
		</td>
		<td class="whitespace-nowrap px-4 py-2">
			<div class="flex gap-1 flex-wrap">
				for _, ps := range playersSpells {
					if ps.PlayerId == p.Id {
						@Spell(ps)
					}
				}
			</div>
		</td>
	</tr>
}

templ PlayerTable(match model.Match, players []model.Player, spells []model.MatchPlayerSpell) {
	<table
		class="min-w-full divide-y-2 divide-gray-200 bg-white text-sm dark:divide-gray-700 dark:bg-gray-900"
	>
		<thead class="ltr:text-left rtl:text-right">
			<tr>
				<th class="whitespace-nowrap  text-left px-4 py-2 font-medium text-gray-900 dark:text-white">Round nÂ° { strconv.Itoa(match.Round) }</th>
				<th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white"></th>
			</tr>
		</thead>
		<tbody
			hx-swap="outerHTML swap:0.5s"
			hx-target="closest tr"
			class="divide-y divide-gray-200 dark:divide-gray-700"
		>
			for _, player := range players {
				@Player(player, spells)
			}
		</tbody>
	</table>
}
