package page

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/markbates/goth"
	"github.com/rousseau-romain/round-timing/model"
	"github.com/rousseau-romain/round-timing/shared/components"
)

templ TeamPlayer(p model.Player, m model.Match) {
	<tr class={ "bg-" + p.Team.Color + "-200" }>
		<td
			class="text-center whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white"
		>
			<input
				class="text-center bg-transparent"
				type="text"
				name="name"
				value={ p.Name }
				hx-patch={ fmt.Sprintf("/match/%d/player/%d", m.Id, p.Id) }
				hx-swap="none"
				hx-trigger="input changed delay:500ms, keyup[key=='Enter']"
			/>
		</td>
		<td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-200">
			<img onclick="handleClickImage(this)" alt={ p.Class.Name } src={ p.Class.UrlImage + "F.svg" } class="h-8 m-auto img-class"/>
		</td>
		<td class="text-center whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-200">
			{ p.Team.Name }
		</td>
		<td class="whitespace-nowrap px-4 py-2">
			<button
				hx-delete={ fmt.Sprintf("/match/%d/player/%d", m.Id, p.Id) }
				hx-on::after-request="setTimeout(performAnimation, 250)"
				class="inline-block rounded bg-red-600 px-4 py-2 text-xs font-medium text-white hover:bg-red-700"
			>
				{ i18n.T(ctx, "global.buttons.delete") }
			</button>
		</td>
	</tr>
}

templ TeamPlayerTable(players []model.Player, match model.Match) {
	<div class="bg-red-200 border-red-200"></div>
	<div class="bg-indigo-200 border-indigo-200"></div>
	// SHITY WORKAROUND
	<script>
		function handleClickImage(img) {
			if (img.src.includes("F")) {
				img.src = img.src.replace("F", "M");
			} else {
				img.src = img.src.replace("M", "F");
			}
		}
	</script>
	<div id="div-table-button" class="overflow-x-auto mb-5 flex-col items-center hidden">
		<table
			class="mb-2 min-w-full divide-y-2 divide-gray-200 bg-white text-sm dark:divide-gray-700 dark:bg-gray-900"
		>
			<thead class="ltr:text-left rtl:text-right">
				<tr>
					for _, th := range []string{i18n.T(ctx, "global.table.name"), i18n.T(ctx, "global.table.class"), i18n.T(ctx, "global.table.team"), ""} {
						<th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
							{ th }
						</th>
					}
				</tr>
			</thead>
			<tbody
				hx-swap="outerHTML swap:0.1s"
				hx-target="closest tr"
				class="divide-y divide-gray-200 dark:divide-gray-700"
			>
				for _, player := range players {
					@TeamPlayer(player, match)
				}
			</tbody>
		</table>
		<a
			id="link-start-match-body"
			href={ templ.SafeURL(fmt.Sprintf("/match/%d/start", match.Id)) }
			class="max-w-max rounded-lg bg-black px-5 py-3 font-medium text-white sm:w-auto"
		>
			if match.Round > 0 {
				{ i18n.T(ctx, "page.match.button.go-to-match") }
			} else {
				{ i18n.T(ctx, "page.match.button.start-match") }
			}
		</a>
	</div>
}

templ TeamPlayerListPage(userGoth goth.User, user model.User, errors components.Error, navItems []components.NavItem, languages []model.Language, pageSlug string, modelUser model.User, match model.Match, teams []model.Team, classes []model.Class, players []model.Player) {
	@components.Layout(i18n.T(ctx, "page.match.title", i18n.M{"name": match.Name}), errors, userGoth, user, navItems, languages, pageSlug) {
		<div class="container mx-auto">
			<h1 class="mb-2">{ i18n.T(ctx, "page.match.h1") }</h1>
			if match.Round > 0 {
				<button
					type="submit"
					class="inline-block w-full rounded-lg bg-red-600 px-5 py-3 font-medium text-white sm:w-auto"
					hx-patch={ fmt.Sprintf("/match/%d/reset", match.Id) }
				>
					{ i18n.T(ctx, "page.match.button.reset-match") }
				</button>
			} else {
				for it, team := range teams {
					<div
						class={ "flex items-center justify-between",
								"border-2 rounded-md p-2 mb-2",
								"border-" + team.Color + "-200" }
					>
						for _, class := range classes {
							<button
								class={
									"rounded-md lg:w-16 lg:h-16 md:w-12 md:h-12 w-8 h-8",
									"bg-" + team.Color + "-200",
								}
								hx-post={ fmt.Sprintf("/match/%d/player", match.Id) }
								hx-vals={ fmt.Sprintf(`{"idTeam": "%d", "idClass": "%d", "name": "%s"}`, team.Id, class.Id, class.Name+" - "+team.Color) }
								if it == 0 {
									hx-swap="afterbegin"
								} else {
									hx-swap="afterend"
								}
								hx-target="next tbody"
								hx-on::after-request="performAnimation()"
								hx-target-error="#errors"
							>
								<img class="img-class lg:h-12 md:h-9 h-6 w-max mx-auto" alt={ class.Name } src={ class.UrlImage + "F.svg" }/>
							</button>
						}
					</div>
				}
			}
			@TeamPlayerTable(players, match)
			<script>
				function performAnimation() {
					const tbody = document.querySelector("tbody");
					const divTableButton = document.getElementById("div-table-button");

					if (tbody.children.length > 0) {
						divTableButton.classList.add("flex");
						divTableButton.classList.remove("hidden");
					}
					else {
						divTableButton.classList.remove("flex");
						divTableButton.classList.add("hidden");
					}
				}
				performAnimation()
    		</script>
		</div>
	}
}
