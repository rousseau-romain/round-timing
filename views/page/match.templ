package page

import "round-timing/shared/components"
import "github.com/markbates/goth"
import "round-timing/model"
import "fmt"

templ TeamPlayer(p model.Player, m model.Match) {
	<tr class={ "bg-" + p.Team.Color + "-200" }>
		<td class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
			{ p.Name }
		</td>
		<td class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-200">
			<img onclick="handleClickImage(this)" alt={ p.Class.Name } src={ p.Class.UrlImage + "F.svg" } class="h-8 m-auto img-class"/>
		</td>
		<td class={ "whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-200" }>
			{ p.Team.Name }
		</td>
		<td class="whitespace-nowrap px-4 py-2">
			<a
				href={ templ.SafeURL(fmt.Sprintf("/player/%d", p.Id)) }
				class="inline-block rounded bg-indigo-600 px-4 py-2 text-xs font-medium text-white hover:bg-indigo-700"
			>
				View
			</a>
		</td>
		<td class="whitespace-nowrap px-4 py-2">
			<button
				hx-delete={ fmt.Sprintf("/match/%d/player/%d", m.Id, p.Id) }
				hx-on::after-request="setTimeout(performAnimation, 750)"
				class="inline-block rounded bg-red-600 px-4 py-2 text-xs font-medium text-white hover:bg-red-700"
			>
				Delete
			</button>
		</td>
	</tr>
}

var thList = []string{"Name", "Class", "Team", "", ""}

templ TeamPlayerTable(players []model.Player, match model.Match) {
	<div class="bg-red-200"></div>
	<div class="bg-indigo-200"></div>
	// SHITY WORKAROUND
	<script>
		function handleClickImage(img) {
			if (img.src.includes("F")) {
				img.src = img.src.replace("F", "M");
			} else {
				img.src = img.src.replace("M", "F");
			}
		}
	</script>
	<div class="overflow-x-auto mb-5">
		<table
			class="min-w-full divide-y-2 divide-gray-200 bg-white text-sm dark:divide-gray-700 dark:bg-gray-900"
		>
			<thead class="ltr:text-left rtl:text-right">
				<tr>
					for _, th := range thList {
						<th class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">
							{ th }
						</th>
					}
				</tr>
			</thead>
			<tbody
				hx-confirm="Are you sure?"
				hx-swap="outerHTML swap:0.5s"
				hx-target="closest tr"
				class="divide-y divide-gray-200 dark:divide-gray-700"
			>
				for _, player := range players {
					@TeamPlayer(player, match)
				}
			</tbody>
		</table>
	</div>
}

templ TeamPlayerListPage(user goth.User, errors components.Error,navItems []components.NavItem, modelUser model.User, match model.Match, teams []model.Team, classes []model.Class, players []model.Player) {
	@components.Layout("Create match", errors, user, navItems) {
		<div class="container mx-auto">
			<h1>Add classes</h1>
			if match.Round > 0 {
				<button
					type="submit"
					class="inline-block w-full rounded-lg bg-red-600 px-5 py-3 font-medium text-white sm:w-auto"
					hx-patch={ fmt.Sprintf("/match/%d/reset", match.Id) }
				>
					Reset match to add players
				</button>
			} else {
				<form
					class="space-y-4"
					hx-post={ fmt.Sprintf("/match/%d/player", match.Id) }
					hx-swap="afterbegin"
					hx-target="next tbody"
					hx-on::after-request="performAnimation()"
				>
					<div>
						<label class="sr-only" for="idColorTeam">Color Team</label>
						<select
							class="w-full rounded-lg border-gray-200 p-3 text-sm"
							required
							name="idTeam"
						>
							for _, team := range teams {
								<option
									value={ fmt.Sprintf("%d", team.Id) }
								>
									{ team.Color }
								</option>
							}
						</select>
					</div>
					<div>
						<label class="sr-only" for="idClass">Class Team</label>
						<select
							class="w-full rounded-lg border-gray-200 p-3 text-sm"
							required
							name="idClass"
							id="idClass"
							onchange="updateInput(this)"
						>
							for _, class := range classes {
								<option value={ fmt.Sprintf("%d", class.Id) }>{ class.Name }</option>
							}
						</select>
					</div>
					<div>
						<label class="sr-only" for="name">Name</label>
						<input
							class="w-full rounded-lg border-gray-200 p-3 text-sm"
							placeholder="Player Name"
							required
							type="text"
							name="name"
							id="name"
						/>
					</div>
					<script>
						function updateInput(option){
							const inputElement = document.getElementById("name");
							const textOption = option.options[option.selectedIndex].text

							if (inputElement.value.trim() === "") {
								inputElement.value = textOption || "";  // Optional fallback
							}

						}
					</script>
					<button
						type="submit"
						class="inline-block w-full rounded-lg bg-black px-5 py-3 font-medium text-white sm:w-auto"
					>
						Add classes
					</button>
				</form>
			}
			@TeamPlayerTable(players, match)
			<a
				id="link-start-match-body"
				href={ templ.SafeURL(fmt.Sprintf("/match/%d/start", match.Id)) }
				class="w-full rounded-lg bg-black px-5 py-3 font-medium text-white sm:w-auto hidden"
			>
				Start match
			</a>
			<script>
				function performAnimation() {
					const tbody = document.querySelector("tbody");
					const a = document.getElementById("link-start-match-body");

					if (tbody.children.length > 0) {
						a.classList.add("inline-block");
						a.classList.remove("hidden");
					}
					else {
						a.classList.remove("inline-block");
						a.classList.add("hidden");
					}
				}
				performAnimation()
    		</script>
		</div>
	}
}
